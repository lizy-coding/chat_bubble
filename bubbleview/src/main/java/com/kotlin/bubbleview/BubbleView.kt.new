package com.kotlin.bubbleview

import android.animation.Animator
import android.animation.ValueAnimator
import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Rect
import android.util.AttributeSet
import android.view.MotionEvent
import android.view.View
import androidx.core.content.withStyledAttributes
import com.kotlin.bubbleview.controllers.BubbleController
import com.kotlin.bubbleview.interfaces.IBubbleView
import com.kotlin.bubbleview.strategies.DefaultParticleStrategy

/**
 * 气泡视图
 * 重构版本，使用MVC架构
 */
class BubbleView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : View(context, attrs, defStyleAttr), IBubbleView {

    // 画笔
    private val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG)
    private val textPaint = Paint(Paint.ANTI_ALIAS_FLAG)
    private val particlePaint = Paint(Paint.ANTI_ALIAS_FLAG)
    
    // 文本
    private var bubbleText = ""
    
    // 圆的颜色
    private var circleColor = Color.RED
    
    // 文字的颜色
    private var bubbleTextColor = Color.WHITE
    
    // 文字的大小
    private var textSize = context.dpToPx(15f).toFloat()
    
    // 生成粒子的bitmap
    private var bitmap: Bitmap? = null
    
    // 粒子的集合
    private val particleList = mutableListOf<Particle>()
    
    // 控制器
    private val bubbleController = BubbleController()
    
    // 粒子效果策略
    private val particleStrategy = DefaultParticleStrategy()
    
    // 动画结束的监听
    var onAnimationEndListener: OnAnimationEndListener? = null

    init {
        // 获取自定义属性
        context.withStyledAttributes(attrs, R.styleable.BubbleView) {
            bubbleText = getString(R.styleable.BubbleView_bubbleText) ?: ""
            circleColor = getColor(R.styleable.BubbleView_bubbleColor, Color.RED)
            bubbleTextColor = getColor(R.styleable.BubbleView_textColor, Color.WHITE)
            textSize = getDimension(R.styleable.BubbleView_textSize, context.dpToPx(15f).toFloat())
            
            // 读取粒子效果参数
            val particleCount = getInteger(R.styleable.BubbleView_particleCount, Particle.PARTICLE_COUNT)
            val explosionDuration = getInteger(R.styleable.BubbleView_explosionDuration, 1500)
            val speedFactor = getFloat(R.styleable.BubbleView_particleSpeedFactor, 1.0f)
            val sizeFactor = getFloat(R.styleable.BubbleView_particleSizeFactor, 1.0f)
            val alphaFactor = getFloat(R.styleable.BubbleView_particleAlphaFactor, 1.0f)
            val breakFactor = getFloat(R.styleable.BubbleView_explosionDuration, 5.0f)
            
            // 设置粒子效果参数
            particleStrategy.setEffectParams(
                particleCount, 
                explosionDuration, 
                speedFactor, 
                sizeFactor, 
                alphaFactor
            )
            
            // 设置断开距离因子
            bubbleController.setBreakDistanceFactor(breakFactor)
        }
        
        // 初始化画笔
        circlePaint.color = circleColor
        textPaint.color = bubbleTextColor
        textPaint.textSize = textSize
        
        // 设置控制器
        bubbleController.setParticleEffectStrategy(particleStrategy)
        bubbleController.setStateChangeListener(object : BubbleController.OnBubbleStateChangeListener {
            override fun onBubbleBreak() {
                bitmap?.let {
                    generateParticles(it)
                    startAnimation()
                }
            }
            
            override fun onAnimationEnd() {
                clearStatus()
                onAnimationEndListener?.onEnd(this@BubbleView)
            }
        })
    }

    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
        val widthMode = MeasureSpec.getMode(widthMeasureSpec)
        val widthSize = MeasureSpec.getSize(widthMeasureSpec)
        val heightMode = MeasureSpec.getMode(heightMeasureSpec)
        val heightSize = MeasureSpec.getSize(heightMeasureSpec)
        
        val width = when (widthMode) {
            MeasureSpec.EXACTLY -> widthSize
            else -> context.dpToPx(15f)
        }
        
        val height = when (heightMode) {
            MeasureSpec.EXACTLY -> heightSize
            else -> context.dpToPx(15f)
        }
        
        setMeasuredDimension(width, height)
    }

    public override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        super.onSizeChanged(w, h, oldw, oldh)
        bubbleController.init(w, h)
    }

    override fun onDraw(canvas: Canvas) {
        // 绘制路径和圆形
        bubbleController.drawPath(
            canvas,
            { path -> canvas.drawPath(path, circlePaint) },
            { circle -> canvas.drawCircle(circle.x, circle.y, circle.radius, circlePaint) }
        )
        
        // 绘制粒子
        if (bubbleController.canDrawParticle()) {
            drawParticle(canvas)
            return
        }
        
        // 绘制文字
        if (!bubbleController.canDrawParticle()) {
            drawText(canvas)
        }
    }

    @SuppressLint("ClickableViewAccessibility")
    override fun onTouchEvent(event: MotionEvent): Boolean {
        when (event.action) {
            MotionEvent.ACTION_DOWN -> {
                bitmap = createBitmap()
            }
        }
        
        val result = bubbleController.handleTouchEvent(event) { createBitmap() }
        invalidate()
        
        if (event.action == MotionEvent.ACTION_MOVE) {
            parent.requestDisallowInterceptTouchEvent(true)
        }
        
        return true
    }

    /**
     * 生成粒子
     */
    private fun generateParticles(bitmap: Bitmap) {
        bubbleController.setParticleDrawState(true)
        particleList.clear()
        
        val endCircle = bubbleController.getEndCircle()
        val particles = particleStrategy.generateParticles(
            bitmap, 
            endCircle.x, 
            endCircle.y, 
            endCircle.radius
        )
        
        particleList.addAll(particles)
    }

    /**
     * 开始动画
     */
    private fun startAnimation() {
        ValueAnimator.ofFloat(0f, 1f).apply {
            duration = particleStrategy.getDuration().toLong()
            addUpdateListener { animator ->
                val value = animator.animatedValue as Float
                particleStrategy.updateParticles(
                    particleList, 
                    value, 
                    measuredWidth, 
                    measuredHeight
                )
                invalidate()
            }
            
            addListener(object : Animator.AnimatorListener {
                override fun onAnimationStart(animation: Animator) {}
                
                override fun onAnimationEnd(animation: Animator) {
                    bubbleController.notifyAnimationEnd()
                }
                
                override fun onAnimationCancel(animation: Animator) {}
                
                override fun onAnimationRepeat(animation: Animator) {}
            })
            
            start()
        }
    }

    /**
     * 生成粒子需要的bitmap
     */
    private fun createBitmap(): Bitmap {
        val endCircle = bubbleController.getEndCircle()
        val size = (endCircle.radius * 2).toInt()
        val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        draw(canvas)
        return bitmap
    }

    /**
     * 画文字
     */
    private fun drawText(canvas: Canvas) {
        if (bubbleText.isEmpty()) return
        
        val endCircle = bubbleController.getEndCircle()
        val rect = Rect()
        textPaint.getTextBounds(bubbleText, 0, bubbleText.length, rect)
        val textWidth = textPaint.measureText(bubbleText)
        val x = endCircle.x - textWidth / 2
        val y = endCircle.y + (rect.bottom - rect.top) / 2
        
        canvas.drawText(bubbleText, x, y, textPaint)
    }

    /**
     * 画粒子
     */
    private fun drawParticle(canvas: Canvas) {
        particleList.forEach { particle ->
            particlePaint.color = particle.color
            particlePaint.alpha = (particle.alpha * 255).toInt()
            canvas.drawCircle(particle.cx, particle.cy, particle.radius, particlePaint)
        }
    }

    /**
     * 获取文本
     */
    override fun getText(): String {
        return bubbleText
    }

    /**
     * 设置文字
     */
    override fun setText(text: String) {
        this.bubbleText = text
        invalidate()
    }

    /**
     * 获取文字颜色
     */
    override fun getTextColor(): Int {
        return bubbleTextColor
    }

    /**
     * 设置文字颜色
     */
    override fun setTextColor(textColor: Int) {
        this.bubbleTextColor = textColor
        textPaint.color = textColor
        invalidate()
    }

    /**
     * 获取圆的颜色
     */
    override fun getCircleColor(): Int {
        return circleColor
    }

    /**
     * 设置圆的颜色
     */
    override fun setCircleColor(circleColor: Int) {
        this.circleColor = circleColor
        circlePaint.color = circleColor
        invalidate()
    }

    /**
     * 设置文字大小
     */
    fun setTextSize(size: Float) {
        this.textSize = size
        textPaint.textSize = size
        invalidate()
    }

    /**
     * 刷新状态
     */
    override fun clearStatus() {
        bubbleController.clearStatus()
        particleList.clear()
        invalidate()
    }

    /**
     * 设置粒子爆炸参数
     */
    fun setExplosionParams(
        count: Int = Particle.PARTICLE_COUNT,
        duration: Int = 1500,
        speedFactor: Float = 1.0f,
        sizeFactor: Float = 1.0f,
        alphaFactor: Float = 1.0f
    ) {
        particleStrategy.setEffectParams(
            count,
            duration,
            speedFactor,
            sizeFactor,
            alphaFactor
        )
    }
    
    /**
     * 设置断开连接的临界距离因子
     */
    fun setBreakDistanceFactor(factor: Float) {
        bubbleController.setBreakDistanceFactor(factor)
    }
    
    /**
     * 获取断开连接的临界距离因子
     */
    fun getBreakDistanceFactor(): Float {
        return bubbleController.getBreakDistanceFactor()
    }

    /**
     * 动画结束监听接口
     */
    interface OnAnimationEndListener {
        fun onEnd(bubbleView: BubbleView)
    }
    
    companion object {
        private const val TAG = "BubbleView"
    }
}